% Очистка рабочего пространства, удаление из памяти переменных.
clear; 
% Очистка окна командной строки.
clc;

% Вывод предложенных пользователю функций.
disp('Выберите нужный вариант:');
disp('1. Сжатие фотографии');
disp('2. Генерация случайного массива');
disp('3. Экспорт массива из .csv файла');
disp('4. Ввод массива вручную');

% Ждём ввод пользователя.
number = input('Введите число: ');

% Проверка на корректность введенного числа.
% При некорректном вводе снова запрашиваем у пользователя число на ввод.
while (number != 1 && number != 2 && number != 3 && number != 4)
  number = input('Введите число: ');
end

% Если пользователь захотел сжать фотографию.
if (number == 1)
    % Запрашиваем у пользователя путь и название картинки,
    % которую необходимо сжать.
    filename = input('Введите путь и название файла: ', 's');

    % Блок проверки на корректность ввода. Если путь/название неверные, 
    % то выводим сообщение об ошибке.
    try
      % Считываем фотографию по введёному пути - получаем матрицу пикселей.
      A = imread(filename);
      % Запрашиваем у пользователя степень сжатия.
      k = input('Введите степень сжатия: ');
      % Вызываем функцию для сжатия фотографии при помощи использования FFT
      photo_compress(filename, k);
    catch exception
      disp('Ошибка при открытии фотографии.');
    end
endif
% Если пользователь захотел сгенерировать матрицу.
elseif (number == 2)
    % Создаем флаг.
    correct = true;
    
    % Запрашиваем у пользователя размеры матрицы.
    n1 = input('Введите количество строк массива: ');
    n2 = input('Введите количество столбцов массива: ');
    
    % Проверяем, являются ли введённые значения степенью двойки.
    if (log2(n1) != fix(log2(n1)) || log2(n2) != fix(log2(n2)))
      % Если значения некорректны - выводим сообщение и опускаем флаг. 
      disp('Неподходящий размер массива');
      correct = false;
    endif
    
    % Проверяем, подходит ли матрица по размеру под условия.
    % Первое - квадратность.
    if (n1 != n2)
      % Второе - прямоугольность.
      if (n2 / n1 != 2 && n1 / n2 != 2)
        % Если нет - то алгоритм не предназначен для таких матриц,
        % выводим сообщение и опускаем флаг.
        disp('Неподходящий размер массива');
        correct = false;
      endif
    endif
    
    % Если флаг поднят, то все условия по размеру соблюдены.
    if (correct)
      % Генерируем матрицу нужного размера.
      A = randi([1, 100], n1, n2);
      % Квадратная матрица? 
      if (n1 == n2)
        % Вызываем функцию, считающую Фурье-образ для квадратных матриц
        B = new_fft(A);
      else
        % Иначе вызываем функцию, считающую Фурье-образ для прямоугольных матриц
        B = square(A)
      endif
    endif
% Если пользователь захотел считать матрицу из файла с расширением ".csv".
elseif (number == 3)
    % Создаем флаг.
    correct = true;
  
    % Запрашиваем у пользователя путь и название .csv файла.
    file = input('Введите путь и название файла: ', 's');
  
    % Блок проверки на корректность ввода. Если путь/название неверные, 
    % то выводим сообщение об ошибке.
    try
      % Считываем csv файл - получаем значения в матрицу.
      A = csvread(file)
    catch exception
      disp('Ошибка при прочтении файла');
    end
  
   % Проверяем, являются ли размеры матрицы степенью двойки.
    if (log2(size(A,1)) != fix(log2(size(A,1))) || log2(size(A,2)) != fix(log2(size(A,2))))
      % Если значения некорректны - выводим сообщение и опускаем флаг. 
      disp('Неподходящий размер массива');
      correct = false;
    endif
    
    % Проверяем, подходит ли матрица по размеру под условия.
    % Первое - квадратность.
    if (size(A,1) != size(A,2))
      % Второе - прямоугольность.
      if (size(A,2) / size(A,1) != 2 && size(A,1) / size(A,2) != 2)
        % Если нет - то алгоритм не предназначен для таких матриц,
        % выводим сообщение и опускаем флаг.
        disp('Неподходящий размер массива');
        correct = false;
      endif
    endif
    
    % Если флаг поднят, то все условия по матрице соблюдены.
    if (correct)
      % Проверяем вид матрицы.
      if (size(A,1) == size(A,2))
        % Для квадратных - вызываем соответствующую функцию.
        B = new_fft(A)
      else
        % Иначе вызываем функцию, считающую Фурье-образ для прямоугольных матриц
        B = square(A)
      endif
    endif
% Если пользователь захотел ввести матрицу самостоятельно.
else
    % Создаем флаг.
    correct = true;
    
    % Запрашиваем у пользователя размеры матрицы.
    n1 = input('Введите количество строк массива: ');
    n2 = input('Введите количество столбцов массива: ');
    
    % Проверяем, являются ли введённые значения степенью двойки.
    if (log2(n1) != fix(log2(n1)) || log2(n2) != fix(log2(n2)))
      % Если значения некорректны - выводим сообщение и опускаем флаг. 
      disp('Неподходящий размер массива');
      correct = false;
    endif
    
    % Проверяем, подходит ли матрица по размеру под условия.
    % Первое - квадратность.
    if (n1 != n2)
      % Второе - прямоугольность.
      if (n2 / n1 != 2 && n1 / n2 != 2)
        % Если нет - то алгоритм не предназначен для таких матриц,
        % выводим сообщение и опускаем флаг.
        disp('Неподходящий размер массива');
        correct = false;
      endif
    endif
    
    % Если флаг поднят, то все условия по матрице соблюдены.
    if (correct)
      % Создаём матрицу введённых размеров, заполненную нулями.
      A = zeros(n1, n2);
      
      % В цикле запрашиваем у пользователя значение каждого элемента.
      for i=1:n1
        for j=1:n2
          prompt = sprintf('Введите элемент [%d, %d]: ', i, j);
          A(i, j) = input(prompt);
        endfor
      endfor
      
      % Считаем Фурье-образ.
      if (n1 == n2)
        % Для квадратных матриц - своя функция.
        B = new_fft(A)
      else
        % Для прямоугольных - своя.
        B = square(A)
      endif
   endif
endif
